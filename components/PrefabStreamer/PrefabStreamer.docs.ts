export const docs = '# PrefabStreamer\n\n## Basic Knowledge\n\nThe \`PrefabStreamer\` is a powerful component that dynamically loads and unloads prefabs based on their distance from a target object, typically the camera. This is essential for managing memory and maintaining performance in large scenes with many objects.\n\n## Description\n\nThe \`PrefabStreamerComp\` component works in conjunction with the internal \`PrefabStreamer\` class to efficiently manage prefab instances in the scene. It automatically loads prefabs when the target enters their specified \`renderDistance\` and unloads them when the target moves away. \n\nThe primary way to use the streamer is by pointing it to a folder. It will automatically find all prefabs within that folder and its subdirectories, organizing them based on their folder structure. This makes it incredibly easy to manage large collections of environmental Prefabs, dungeons, or points of interest.\n\n## Use Cases\n\n- **Large open worlds:** In games with large, open environments, it\'s not feasible to have all objects loaded at once. The \`PrefabStreamer\` can be used to load and unload parts of the world as the player explores.\n- **Complex scenes with many details:** Even in smaller scenes, if there are many detailed prefabs, the \`PrefabStreamer\` can help keep memory usage down by only loading what\'s visible to the player.\n- **Procedural or modular environments:** Easily stream in modular pieces of a level, like different dungeon rooms or building sections.\n\n---\n\n## Setup Guide\n\n### 1. Folder Organization\n\nThe key to using the PrefabStreamer effectively is organizing your prefabs in the project\'s \`Prefabs\` directory.\n\n- Create a main folder for your streamable prefabs. A common convention is \`Prefabs/Streamer/\`.\n- Inside this main folder, create sub-folders for each group of prefabs you want to manage together. These sub-folder names will be used to group the instantiated prefabs in the scene hierarchy.\n\n**Example Structure:**\n\n\nPrefabs/\n└── Streamer/\n    ├── BeachDungeon/\n    │   ├── PalmTree.roguePrefab\n    │   ├── TreasureChest.roguePrefab\n    │   └── RockFormation.roguePrefab\n    │\n    └── LostCastle/\n        ├── CastleWall_A.roguePrefab\n        ├── CastleWall_B.roguePrefab\n        └── CastleTower.roguePrefab\n\n### 2. Prefab Placement & Position\n\n- Place your \`.roguePrefab\` files inside the folders you created.\n- **Crucially, the streamer uses the prefab\'s own saved position to determine where to spawn it in the world.** Make sure you have placed your prefabs at the correct world coordinates in the editor and saved them. The streamer will instantiate them at that exact position.\n\n### 3. Scene Setup\n\n1.  Create a new empty object in your scene. A good name for it is \`_PrefabStreamer\`.\n2.  Add the \`PrefabStreamerComp\` component to this object.\n3.  In the component\'s properties:\n    -   **Streaming Folder Path**: Set this to the main folder you created in step 1. Using the example above, you would set this to \`Streamer/\`.\n    -   **Default Render Distance**: Adjust this value. This is the distance from the camera (or target) at which the prefabs will start to load.\n    -   **Enable Logging**: Keep this checked during development to see detailed logs in the console about which prefabs are being loaded and unloaded.\n\n### How It Works at Runtime\n\nWhen the scene starts:\n- The \`PrefabStreamerComp\` will scan the \`Prefabs/Streamer/\` directory and all its subdirectories.\n- It finds all \`.roguePrefab\` files.\n- For each prefab, it notes its path and its saved position.\n- During the game, it constantly checks the camera\'s position.\n- When the camera gets within the \`renderDistance\` of a prefab\'s saved position, the streamer will load and instantiate it.\n- To keep the scene organized, it will create empty \`Object3D\` containers named after your sub-folders (\`BeachDungeon\`, \`LostCastle\`). The corresponding prefabs will be spawned inside these containers.\n- When the camera moves away, the prefabs are destroyed and removed from the scene to save memory.\n\n---\n\n## Advanced Usage: Dynamic Control\n\nWhile folder-based streaming is the primary use case, you can also add and remove prefabs dynamically from your own scripts.\n\nFirst, get a reference to the \`PrefabStreamerComp\`:\n\n\`typescript\nimport PrefabStreamerComp from \"./PrefabStreamerComp.re\"; // Adjust path as needed\nimport * as RE from \'rogue-engine\';\n\n// In another component...\nlet streamer: PrefabStreamerComp;\n\nstart() {\n    const streamerObject = RE.Runtime.scene.findObjectByName(\"_PrefabStreamer\");\n    if (streamerObject) {\n        this.streamer = streamerObject.getComponent(PrefabStreamerComp);\n    }\n}\n\`\n\n### Adding a Prefab\n\nYou can add a new prefab to be managed by the streamer.\n\n\`typescript\n// Add a specific prefab with a render distance of 200 units\nthis.streamer.add({\n    id: \"UniqueIdForThisPrefab\", // A unique ID for this instance\n    path: \"Streamer/SpecialItems/LegendarySword.roguePrefab\", // Path to the prefab\n    renderDistance: 200\n});\n\`\n\n### Removing a Prefab\n\nYou can remove a prefab that was added dynamically. You cannot remove prefabs that were loaded automatically from the streaming folder.\n\n\`typescript\nthis.streamer.remove(\"UniqueIdForThisPrefab\");\n\`\n';